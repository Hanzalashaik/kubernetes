* 
* ==> Audit <==
* |----------------|--------------------------------|---------------|---------|---------|---------------------|---------------------|
|    Command     |              Args              |    Profile    |  User   | Version |     Start Time      |      End Time       |
|----------------|--------------------------------|---------------|---------|---------|---------------------|---------------------|
| start          |                                | minikube      | hanzala | v1.32.0 | 14 Apr 24 23:39 IST |                     |
| start          |                                | minikube      | hanzala | v1.32.0 | 14 Apr 24 23:42 IST | 14 Apr 24 23:46 IST |
| start          |                                | minikube      | hanzala | v1.32.0 | 15 Apr 24 06:45 IST |                     |
| start          |                                | minikube      | hanzala | v1.32.0 | 29 Apr 24 15:22 IST | 29 Apr 24 15:23 IST |
| stop           |                                | minikube      | hanzala | v1.32.0 | 29 Apr 24 15:24 IST | 29 Apr 24 15:25 IST |
| start          |                                | minikube      | hanzala | v1.32.0 | 29 Apr 24 15:26 IST | 29 Apr 24 15:26 IST |
| stop           |                                | minikube      | hanzala | v1.32.0 | 29 Apr 24 15:32 IST | 29 Apr 24 15:32 IST |
| start          | --nodes 2 -p local-cluster     | local-cluster | hanzala | v1.32.0 | 29 Apr 24 15:34 IST | 29 Apr 24 15:35 IST |
|                | --driver=docker                |               |         |         |                     |                     |
| node           | add --worker -p local-cluster  | local-cluster | hanzala | v1.32.0 | 29 Apr 24 15:44 IST | 29 Apr 24 15:44 IST |
| delete         | node local-cluster-m03         | minikube      | hanzala | v1.32.0 | 29 Apr 24 15:49 IST |                     |
| node           | delete local-cluster-m03 -p    | local-cluster | hanzala | v1.32.0 | 29 Apr 24 15:50 IST | 29 Apr 24 15:50 IST |
|                | local-cluster                  |               |         |         |                     |                     |
| dashboard      | --url -p local-cluster         | local-cluster | hanzala | v1.32.0 | 29 Apr 24 15:51 IST |                     |
| start          |                                | minikube      | hanzala | v1.32.0 | 30 Apr 24 10:18 IST | 30 Apr 24 10:18 IST |
| ip             |                                | minikube      | hanzala | v1.32.0 | 30 Apr 24 12:05 IST | 30 Apr 24 12:05 IST |
| ip             |                                | minikube      | hanzala | v1.32.0 | 30 Apr 24 12:13 IST | 30 Apr 24 12:13 IST |
| addons         | enable ingress -p minikube     | minikube      | hanzala | v1.32.0 | 30 Apr 24 12:58 IST | 30 Apr 24 13:03 IST |
| ip             |                                | minikube      | hanzala | v1.32.0 | 30 Apr 24 13:09 IST | 30 Apr 24 13:09 IST |
| ip             | -p minikube                    | minikube      | hanzala | v1.32.0 | 30 Apr 24 13:09 IST | 30 Apr 24 13:09 IST |
| ip             |                                | minikube      | hanzala | v1.32.0 | 30 Apr 24 13:14 IST | 30 Apr 24 13:14 IST |
| delete         | all --all                      | minikube      | hanzala | v1.32.0 | 30 Apr 24 15:43 IST |                     |
| delete         | minikube                       | minikube      | hanzala | v1.32.0 | 01 May 24 12:32 IST |                     |
| start          | -p minikube                    | minikube      | hanzala | v1.32.0 | 01 May 24 12:32 IST | 01 May 24 12:33 IST |
| update-context |                                | minikube      | hanzala | v1.32.0 | 01 May 24 12:42 IST | 01 May 24 12:42 IST |
| start          | --nodes 4                      | minikube      | hanzala | v1.32.0 | 01 May 24 12:43 IST | 01 May 24 12:43 IST |
| start          | --nodes 4                      | minikube      | hanzala | v1.32.0 | 01 May 24 12:46 IST |                     |
| start          | -p node                        | node          | hanzala | v1.32.0 | 01 May 24 12:50 IST | 01 May 24 12:50 IST |
| start          | --nodes 4                      | minikube      | hanzala | v1.32.0 | 01 May 24 12:51 IST |                     |
| start          | -p local-cluster               | local-cluster | hanzala | v1.32.0 | 01 May 24 12:54 IST | 01 May 24 12:58 IST |
| start          |                                | minikube      | hanzala | v1.32.0 | 01 May 24 12:59 IST |                     |
|----------------|--------------------------------|---------------|---------|---------|---------------------|---------------------|

* 
* ==> Last Start <==
* Log file created at: 2024/05/01 12:59:56
Running on machine: hanzala
Binary: Built with gc go1.21.3 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0501 12:59:56.080658  120990 out.go:296] Setting OutFile to fd 1 ...
I0501 12:59:56.080748  120990 out.go:348] isatty.IsTerminal(1) = true
I0501 12:59:56.080750  120990 out.go:309] Setting ErrFile to fd 2...
I0501 12:59:56.080753  120990 out.go:348] isatty.IsTerminal(2) = true
I0501 12:59:56.080883  120990 root.go:338] Updating PATH: /home/hanzala/.minikube/bin
W0501 12:59:56.080958  120990 root.go:314] Error reading config file at /home/hanzala/.minikube/config/config.json: open /home/hanzala/.minikube/config/config.json: no such file or directory
I0501 12:59:56.081177  120990 out.go:303] Setting JSON to false
I0501 12:59:56.082271  120990 start.go:128] hostinfo: {"hostname":"hanzala","uptime":11362,"bootTime":1714537234,"procs":420,"os":"linux","platform":"ubuntu","platformFamily":"debian","platformVersion":"22.04","kernelVersion":"6.5.0-28-generic","kernelArch":"x86_64","virtualizationSystem":"kvm","virtualizationRole":"host","hostId":"3494d66d-9cda-478c-b3a5-850bc1729d12"}
I0501 12:59:56.082306  120990 start.go:138] virtualization: kvm host
I0501 12:59:56.093091  120990 out.go:177] 😄  minikube v1.32.0 on Ubuntu 22.04
I0501 12:59:56.094359  120990 notify.go:220] Checking for updates...
I0501 12:59:56.094610  120990 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I0501 12:59:56.094659  120990 driver.go:378] Setting default libvirt URI to qemu:///system
I0501 12:59:56.108909  120990 docker.go:122] docker version: linux-24.0.5:
I0501 12:59:56.108980  120990 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0501 12:59:56.125753  120990 info.go:266] docker info: {ID:cb69f527-dec1-4934-a0c1-bdfa107f7584 Containers:8 ContainersRunning:2 ContainersPaused:0 ContainersStopped:6 Images:19 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:38 OomKillDisable:false NGoroutines:55 SystemTime:2024-05-01 12:59:56.119742891 +0530 IST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:6.5.0-28-generic OperatingSystem:Ubuntu 22.04.4 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:7944613888 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:hanzala Labels:[] ExperimentalBuild:false ServerVersion:24.0.5 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID: Expected:} RuncCommit:{ID: Expected:} InitCommit:{ID: Expected:} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[] Warnings:<nil>}}
I0501 12:59:56.125838  120990 docker.go:295] overlay module found
I0501 12:59:56.126524  120990 out.go:177] ✨  Using the docker driver based on existing profile
I0501 12:59:56.127503  120990 start.go:298] selected driver: docker
I0501 12:59:56.127509  120990 start.go:902] validating driver "docker" against &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[default-storageclass:true ingress:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/hanzala:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I0501 12:59:56.127593  120990 start.go:913] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0501 12:59:56.127676  120990 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0501 12:59:56.145743  120990 info.go:266] docker info: {ID:cb69f527-dec1-4934-a0c1-bdfa107f7584 Containers:8 ContainersRunning:2 ContainersPaused:0 ContainersStopped:6 Images:19 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:38 OomKillDisable:false NGoroutines:55 SystemTime:2024-05-01 12:59:56.138998512 +0530 IST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:6.5.0-28-generic OperatingSystem:Ubuntu 22.04.4 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:7944613888 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:hanzala Labels:[] ExperimentalBuild:false ServerVersion:24.0.5 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID: Expected:} RuncCommit:{ID: Expected:} InitCommit:{ID: Expected:} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[] Warnings:<nil>}}
I0501 12:59:56.146374  120990 cni.go:84] Creating CNI manager for ""
I0501 12:59:56.146385  120990 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0501 12:59:56.146393  120990 start_flags.go:323] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[default-storageclass:true ingress:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/hanzala:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I0501 12:59:56.147654  120990 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I0501 12:59:56.148213  120990 cache.go:121] Beginning downloading kic base image for docker with docker
I0501 12:59:56.148769  120990 out.go:177] 🚜  Pulling base image ...
I0501 12:59:56.149744  120990 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I0501 12:59:56.149775  120990 preload.go:148] Found local preload: /home/hanzala/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4
I0501 12:59:56.149779  120990 cache.go:56] Caching tarball of preloaded images
I0501 12:59:56.149805  120990 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local docker daemon
I0501 12:59:56.149836  120990 preload.go:174] Found /home/hanzala/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0501 12:59:56.149841  120990 cache.go:59] Finished verifying existence of preloaded tar for  v1.28.3 on docker
I0501 12:59:56.149911  120990 profile.go:148] Saving config to /home/hanzala/.minikube/profiles/minikube/config.json ...
I0501 12:59:56.164798  120990 image.go:83] Found gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local docker daemon, skipping pull
I0501 12:59:56.164809  120990 cache.go:144] gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 exists in daemon, skipping load
I0501 12:59:56.164819  120990 cache.go:194] Successfully downloaded all kic artifacts
I0501 12:59:56.164840  120990 start.go:365] acquiring machines lock for minikube: {Name:mk88fb2e7dd724c4abd53f83df31b919c73f045b Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0501 12:59:56.164893  120990 start.go:369] acquired machines lock for "minikube" in 32.42µs
I0501 12:59:56.164903  120990 start.go:96] Skipping create...Using existing machine configuration
I0501 12:59:56.164911  120990 fix.go:54] fixHost starting: 
I0501 12:59:56.165076  120990 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0501 12:59:56.177174  120990 fix.go:102] recreateIfNeeded on minikube: state=Stopped err=<nil>
W0501 12:59:56.177191  120990 fix.go:128] unexpected machine state, will restart: <nil>
I0501 12:59:56.177907  120990 out.go:177] 🔄  Restarting existing docker container for "minikube" ...
I0501 12:59:56.178909  120990 cli_runner.go:164] Run: docker start minikube
I0501 12:59:56.480056  120990 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0501 12:59:56.491669  120990 kic.go:430] container "minikube" state is running.
I0501 12:59:56.492070  120990 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0501 12:59:56.503099  120990 profile.go:148] Saving config to /home/hanzala/.minikube/profiles/minikube/config.json ...
I0501 12:59:56.503269  120990 machine.go:88] provisioning docker machine ...
I0501 12:59:56.503283  120990 ubuntu.go:169] provisioning hostname "minikube"
I0501 12:59:56.503314  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 12:59:56.513823  120990 main.go:141] libmachine: Using SSH client type: native
I0501 12:59:56.514133  120990 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32797 <nil> <nil>}
I0501 12:59:56.514143  120990 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0501 12:59:56.514538  120990 main.go:141] libmachine: Error dialing TCP: ssh: handshake failed: read tcp 127.0.0.1:39036->127.0.0.1:32797: read: connection reset by peer
I0501 12:59:59.690107  120990 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0501 12:59:59.690230  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 12:59:59.704392  120990 main.go:141] libmachine: Using SSH client type: native
I0501 12:59:59.704735  120990 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32797 <nil> <nil>}
I0501 12:59:59.704746  120990 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0501 12:59:59.811400  120990 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0501 12:59:59.811413  120990 ubuntu.go:175] set auth options {CertDir:/home/hanzala/.minikube CaCertPath:/home/hanzala/.minikube/certs/ca.pem CaPrivateKeyPath:/home/hanzala/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/hanzala/.minikube/machines/server.pem ServerKeyPath:/home/hanzala/.minikube/machines/server-key.pem ClientKeyPath:/home/hanzala/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/hanzala/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/hanzala/.minikube}
I0501 12:59:59.811429  120990 ubuntu.go:177] setting up certificates
I0501 12:59:59.811435  120990 provision.go:83] configureAuth start
I0501 12:59:59.811471  120990 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0501 12:59:59.821873  120990 provision.go:138] copyHostCerts
I0501 12:59:59.821912  120990 exec_runner.go:144] found /home/hanzala/.minikube/ca.pem, removing ...
I0501 12:59:59.821918  120990 exec_runner.go:203] rm: /home/hanzala/.minikube/ca.pem
I0501 12:59:59.821979  120990 exec_runner.go:151] cp: /home/hanzala/.minikube/certs/ca.pem --> /home/hanzala/.minikube/ca.pem (1082 bytes)
I0501 12:59:59.822066  120990 exec_runner.go:144] found /home/hanzala/.minikube/cert.pem, removing ...
I0501 12:59:59.822069  120990 exec_runner.go:203] rm: /home/hanzala/.minikube/cert.pem
I0501 12:59:59.822092  120990 exec_runner.go:151] cp: /home/hanzala/.minikube/certs/cert.pem --> /home/hanzala/.minikube/cert.pem (1123 bytes)
I0501 12:59:59.822145  120990 exec_runner.go:144] found /home/hanzala/.minikube/key.pem, removing ...
I0501 12:59:59.822147  120990 exec_runner.go:203] rm: /home/hanzala/.minikube/key.pem
I0501 12:59:59.822168  120990 exec_runner.go:151] cp: /home/hanzala/.minikube/certs/key.pem --> /home/hanzala/.minikube/key.pem (1679 bytes)
I0501 12:59:59.822213  120990 provision.go:112] generating server cert: /home/hanzala/.minikube/machines/server.pem ca-key=/home/hanzala/.minikube/certs/ca.pem private-key=/home/hanzala/.minikube/certs/ca-key.pem org=hanzala.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0501 13:00:00.044620  120990 provision.go:172] copyRemoteCerts
I0501 13:00:00.044652  120990 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0501 13:00:00.044683  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.054728  120990 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32797 SSHKeyPath:/home/hanzala/.minikube/machines/minikube/id_rsa Username:docker}
I0501 13:00:00.135683  120990 ssh_runner.go:362] scp /home/hanzala/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1082 bytes)
I0501 13:00:00.153267  120990 ssh_runner.go:362] scp /home/hanzala/.minikube/machines/server.pem --> /etc/docker/server.pem (1204 bytes)
I0501 13:00:00.175965  120990 ssh_runner.go:362] scp /home/hanzala/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0501 13:00:00.203631  120990 provision.go:86] duration metric: configureAuth took 392.184738ms
I0501 13:00:00.203649  120990 ubuntu.go:193] setting minikube options for container-runtime
I0501 13:00:00.203841  120990 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I0501 13:00:00.203889  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.215922  120990 main.go:141] libmachine: Using SSH client type: native
I0501 13:00:00.216208  120990 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32797 <nil> <nil>}
I0501 13:00:00.216213  120990 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0501 13:00:00.325861  120990 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0501 13:00:00.325870  120990 ubuntu.go:71] root file system type: overlay
I0501 13:00:00.325985  120990 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0501 13:00:00.326034  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.341876  120990 main.go:141] libmachine: Using SSH client type: native
I0501 13:00:00.342163  120990 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32797 <nil> <nil>}
I0501 13:00:00.342209  120990 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0501 13:00:00.476835  120990 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0501 13:00:00.476918  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.490629  120990 main.go:141] libmachine: Using SSH client type: native
I0501 13:00:00.490905  120990 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32797 <nil> <nil>}
I0501 13:00:00.490915  120990 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0501 13:00:00.608761  120990 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0501 13:00:00.608782  120990 machine.go:91] provisioned docker machine in 4.105503205s
I0501 13:00:00.608798  120990 start.go:300] post-start starting for "minikube" (driver="docker")
I0501 13:00:00.608823  120990 start.go:329] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0501 13:00:00.608900  120990 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0501 13:00:00.608978  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.622267  120990 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32797 SSHKeyPath:/home/hanzala/.minikube/machines/minikube/id_rsa Username:docker}
I0501 13:00:00.712552  120990 ssh_runner.go:195] Run: cat /etc/os-release
I0501 13:00:00.717311  120990 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0501 13:00:00.717343  120990 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0501 13:00:00.717359  120990 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0501 13:00:00.717366  120990 info.go:137] Remote host: Ubuntu 22.04.3 LTS
I0501 13:00:00.717377  120990 filesync.go:126] Scanning /home/hanzala/.minikube/addons for local assets ...
I0501 13:00:00.717450  120990 filesync.go:126] Scanning /home/hanzala/.minikube/files for local assets ...
I0501 13:00:00.717472  120990 start.go:303] post-start completed in 108.661084ms
I0501 13:00:00.717529  120990 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0501 13:00:00.717586  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.728238  120990 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32797 SSHKeyPath:/home/hanzala/.minikube/machines/minikube/id_rsa Username:docker}
I0501 13:00:00.804720  120990 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0501 13:00:00.807632  120990 fix.go:56] fixHost completed within 4.642719538s
I0501 13:00:00.807644  120990 start.go:83] releasing machines lock for "minikube", held for 4.642745478s
I0501 13:00:00.807695  120990 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0501 13:00:00.827741  120990 ssh_runner.go:195] Run: cat /version.json
I0501 13:00:00.827779  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.827793  120990 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0501 13:00:00.827835  120990 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0501 13:00:00.839477  120990 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32797 SSHKeyPath:/home/hanzala/.minikube/machines/minikube/id_rsa Username:docker}
I0501 13:00:00.839804  120990 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32797 SSHKeyPath:/home/hanzala/.minikube/machines/minikube/id_rsa Username:docker}
I0501 13:00:00.918856  120990 ssh_runner.go:195] Run: systemctl --version
I0501 13:00:01.274415  120990 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0501 13:00:01.282510  120990 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0501 13:00:01.307201  120990 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0501 13:00:01.307310  120990 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0501 13:00:01.315045  120990 cni.go:259] no active bridge cni configs found in "/etc/cni/net.d" - nothing to disable
I0501 13:00:01.315066  120990 start.go:472] detecting cgroup driver to use...
I0501 13:00:01.315095  120990 detect.go:199] detected "systemd" cgroup driver on host os
I0501 13:00:01.315198  120990 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0501 13:00:01.327235  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0501 13:00:01.334903  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0501 13:00:01.342272  120990 containerd.go:145] configuring containerd to use "systemd" as cgroup driver...
I0501 13:00:01.342319  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = true|g' /etc/containerd/config.toml"
I0501 13:00:01.349649  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0501 13:00:01.357076  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0501 13:00:01.365170  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0501 13:00:01.372145  120990 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0501 13:00:01.379216  120990 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0501 13:00:01.386349  120990 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0501 13:00:01.391987  120990 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0501 13:00:01.397973  120990 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0501 13:00:01.440878  120990 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0501 13:00:01.498585  120990 start.go:472] detecting cgroup driver to use...
I0501 13:00:01.498621  120990 detect.go:199] detected "systemd" cgroup driver on host os
I0501 13:00:01.498670  120990 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0501 13:00:01.507825  120990 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0501 13:00:01.507873  120990 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0501 13:00:01.517428  120990 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0501 13:00:01.530840  120990 ssh_runner.go:195] Run: which cri-dockerd
I0501 13:00:01.534059  120990 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0501 13:00:01.540581  120990 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0501 13:00:01.552561  120990 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0501 13:00:01.617612  120990 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0501 13:00:01.663129  120990 docker.go:560] configuring docker to use "systemd" as cgroup driver...
I0501 13:00:01.663203  120990 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (129 bytes)
I0501 13:00:01.675639  120990 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0501 13:00:01.744940  120990 ssh_runner.go:195] Run: sudo systemctl restart docker
I0501 13:00:02.475198  120990 out.go:177] 
W0501 13:00:02.475823  120990 out.go:239] ❌  Exiting due to RUNTIME_ENABLE: Failed to enable container runtime: sudo systemctl restart docker: Process exited with status 1
stdout:

stderr:
Job for docker.service canceled.

W0501 13:00:02.475837  120990 out.go:239] 
W0501 13:00:02.476758  120990 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0501 13:00:02.477782  120990 out.go:177] 

* 
